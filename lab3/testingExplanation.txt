Nathan Pacey 18njp
Ashley Robb 19ar42

Lab 3 Testing Explanation:

To test the producer-consumer program with varying numbers of producers and consumers,
we testing the program with a vary number of producers and consumers (one-to-one, one-to-many and many-to-many).
Ensuring the output and test prints matched the expectations of the code.

Preparing Input Files:
For each test case, create the required input files with the naming convention ttestnumprodnum.dat. 
For example, for test number 1 with 3 producers, create files t10.dat, t11.dat, and t12.dat.
Then running the main file using the make command and then the command:
./main testNum numProducers numConsumers.


-- Test Case 1: 1 Producer, 1 Consumer -- 
Running the program as test 1, with one producer and one consumer
Command: ./main 1 1 1

Expected Behavior: The program should run smoothly, reading from one input file and writing to one output file (out10.dat). 
The output file should contain the same sequence of numbers as the input file.
Verification: Compare the contents of the input file t10.dat with the output file out10.dat. They should be identical.

Result: 
For this test the prints were left in and produced the output to the terminal as can be seen in test1-prints.txt:
This file shows that the data appears in the ouput in the same order that it was read by the producers by comparing it to the output file.
The output matches the expected results of the producer and consumer threads given the input files.
To test that the program is reading properly the the input files can be changed with different numbers on each line.

As well the contents of t10.dat are identical to output file out10.dat.


-- Test Case 2: 1 Producer, Many Consumers --
Running the program as test 2, with one producer and 3 consumers
Must prepare file t20.dat and run. Team copied the contents of t12.dat into t20.dat to test:
Command: ./main 2 1 3

Otherwise the program produced the error Message:
't20.dat: No such file or directory
Exit because producer 0 can't open file'
This shows that the program only works when supplied the correctly named files

Expected Behavior: The program should still function correctly, but the consumers might not have much to do if the producer produces data slowly or the buffer size is large. 
All the data from the input file t20.dat should be distributed among the output files out20.dat, out21.dat, and out22.dat.

Results:
The files were properly writtent to with distributed data across out22.dat, out21.dat and out20.dat.
The bash script concate_files.sh was created to test the distribution of data and compare the input file to the output file.
The results for this test can be seen below showing the matching data distribution:

elec377-tues-am-64:~/elec377-tues-am-64/lab3$ ./concate_files.sh t20.dat out22.dat out21.dat out20.dat
Input file contents:
16
26
36
46
56
66
76
86
96
166
116
126
136
146
156
166
176
186
Output files concated contents:
16
26
36
46
56
76
66
86
166
96
116
136
126
146
166
156
176
186


-- Test Case 3: Many Producers, Many Consumers --
testing 3 producers and 3 consumers.
Command: ./main 3 3 3
Created a new input files t30.dat, t31.dat, and t32.dat to test the program by copying t10,t11,t12.dat.

Expected Behavior: The program should be able to handle multiple producers and consumers concurrently. 
The data from input files t30.dat, t31.dat, and t32.dat should be distributed among the output files out30.dat, out31.dat, and out32.dat.
Verification: The output files should contain the same data as trhe input but distributed across the files.

Result: Sucessfully created the proper output files out30.dat, out31.dat and out32.dat
To check the proper distribution a summation of the input files and output files was taken using the script sum_files.sh

/lab3$ ./sum_files.sh
t30.dat t31.dat t32.dat
Sum of t30.dat: 1710
Sum of t31.dat: 1794
Sum of t32.dat: 1878
Total sum: 5382

/lab3$ ./sum_files.sh out30.dat out31.dat out32.dat
Sum of out30.dat: 1722
Sum of out31.dat: 1734
Sum of out32.dat: 1926
Total sum: 5382

Therefore the value of input data equals the value of output data.

To make sure that the number data points contained in both the input and out puts are equal the script count_data_points.sh was created:
/lab3$ ./count_data_points.sh t30.dat t31.dat t32.dat
Number of lines in t30.dat: 18
Number of lines in t31.dat: 18
Number of lines in t32.dat: 18
Total number of lines: 54

/lab3$ ./count_data_points.sh out30.dat out31.dat out32.dat
Number of lines in out30.dat: 16
Number of lines in out31.dat: 18
Number of lines in out32.dat: 20
Total number of lines: 54

It can be seen that there are the same number of data points across the input and ouput files.
To make sure that there are no unique values that still give this result the sorted data can be printed for both the output and input
This was done by redirecting the sorted prints to INPUT and OUTPUT:
/lab3$ ./print_sorted_data.sh t30.dat t31.dat t32.dat > INPUT
./print_sorted_data.sh out30.dat out31.dat out32.dat > OUTPUT

// then running the cmp command to compare the files
/lab3$ if cmp -s INPUT OUTPUT; then   echo "The files are identical."; else   echo "The f
iles are different."; fi
The files are identical.
Therefore the program properly distributed the data across the output files.


-- Test Case 4: Error Checking --
To check for proper error messages the following was done:
** Running the code with no input file matching **
Result:
t44.dat: No such file or directory
Exit because producer 4 can't open file

** Running the code with no input file  **
Result: Usage: ./main testNum numProducers numconsumers

** Running the code with incorrect test number **
./main a 1 1
testNum must be greater than 0, you said a

** Running the code with incorrect producer number **
./main 1 a 1
must be at least one producer, you said a

** Running the code with incorrect consumer number **
./main 1 1 a
must be at least one consumer, you said a

** Running the code with more than max producers **
 ./main 1 6 1
No more than 5 Producers, you said 6

** Running the code with more than max consumers **
./main 1 1 6
No more than 5 Producers, you said 1

Therefore the code can been seen to be working correctly!